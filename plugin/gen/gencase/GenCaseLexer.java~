/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package gencase;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import gencase.psi.Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>GenCase.flex</tt>
 */
class GenCaseLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION = 2;
  public static final int COMMENT = 4;
  public static final int CASE = 6;
  public static final int PHASE = 8;
  public static final int ENTITY = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  1,  1,  1,  1,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 23528 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121"+
    "\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60"+
    "\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\3\37\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\37\1\113\1\37\1\114\3\37\3\1\1\115\1\116\1\117\12\37\4\1\1\120\17\37\2"+
    "\73\1\121\41\37\2\1\1\122\1\123\3\37\1\124\27\73\1\125\2\73\1\126\45\37\1"+
    "\127\13\37\1\130\24\37\1\131\1\132\1\37\1\133\1\134\1\135\1\136\2\37\1\137"+
    "\5\37\1\140\7\37\1\141\1\142\4\37\1\143\2\37\1\144\16\37\246\1\1\145\20\1"+
    "\1\146\1\147\25\73\1\150\51\37\2\1\1\151\u0b05\37\1\152\1\153\u02fe\37");

  /* The ZZ_CMAP_Y table has 6912 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\5\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0\1\27\6\0\1\30\1\31\1\32\1\33\1"+
    "\3\1\34\1\32\1\3\5\14\1\15\7\14\1\15\162\14\1\35\1\36\2\14\1\35\3\3\1\14\1"+
    "\37\1\3\1\40\4\3\34\10\1\14\1\41\1\36\1\42\1\3\1\32\1\15\1\41\4\14\1\43\24"+
    "\14\1\43\42\14\1\44\1\10\1\45\47\14\2\46\1\47\10\14\1\15\1\34\1\3\1\47\11"+
    "\14\1\3\1\50\1\51\12\10\1\52\1\53\1\52\2\3\6\14\1\15\1\3\1\15\3\3\1\0\1\54"+
    "\1\50\1\3\2\10\1\55\1\3\12\14\1\56\7\10\1\57\1\36\1\60\30\14\1\61\1\10\1\62"+
    "\1\10\1\63\1\64\1\65\2\10\1\65\1\66\3\3\1\67\1\70\7\14\6\10\1\55\1\47\25\14"+
    "\1\71\2\10\1\72\3\3\2\10\1\65\7\14\1\56\2\10\1\35\1\32\1\3\5\14\1\71\1\73"+
    "\2\10\2\74\1\57\4\3\6\14\1\74\21\3\1\75\2\14\1\76\1\46\1\77\1\46\1\100\5\3"+
    "\3\46\1\101\6\10\1\102\1\10\15\14\1\71\1\103\4\10\1\74\1\10\2\14\1\71\1\104"+
    "\2\10\1\47\1\14\1\105\1\14\1\106\1\47\1\14\2\66\5\14\1\41\1\14\1\40\1\36\1"+
    "\35\1\103\1\10\2\107\1\110\1\3\1\111\1\3\1\43\1\71\1\104\2\10\1\112\1\3\1"+
    "\50\1\3\1\51\1\47\1\15\1\113\1\66\5\14\1\41\1\14\1\41\1\114\1\35\1\64\1\55"+
    "\1\111\1\107\1\57\1\115\1\3\1\47\1\40\1\3\1\104\2\10\1\65\1\116\2\3\1\51\1"+
    "\47\1\14\2\43\5\14\1\41\1\14\1\41\1\47\1\35\1\103\1\10\2\52\1\57\1\37\3\3"+
    "\1\71\1\104\2\10\1\117\1\3\1\120\1\3\1\51\1\47\1\14\2\66\5\14\1\41\1\14\1"+
    "\41\1\47\1\35\1\103\1\10\2\107\1\57\1\3\1\104\1\3\1\43\1\71\1\104\2\10\1\34"+
    "\3\3\1\121\1\47\1\15\1\36\1\41\1\35\1\114\1\41\1\113\1\37\1\15\1\36\2\14\1"+
    "\35\1\104\1\55\1\104\1\64\1\57\1\37\1\111\3\3\1\104\2\10\2\3\1\117\1\3\1\106"+
    "\1\47\1\14\2\41\5\14\1\41\2\14\1\105\1\35\1\61\1\10\2\64\1\57\1\3\1\53\1\122"+
    "\1\3\1\71\1\104\2\10\4\3\1\123\1\47\1\14\2\41\5\14\1\41\2\14\1\47\1\35\1\103"+
    "\1\10\2\64\1\57\1\3\1\53\1\3\1\32\1\71\1\104\2\10\1\114\3\3\1\124\1\47\1\14"+
    "\2\41\11\14\1\15\1\61\1\10\2\64\1\110\1\3\1\125\1\3\1\126\1\71\1\104\2\10"+
    "\2\3\1\36\1\14\1\104\1\47\3\14\1\15\1\36\5\14\1\43\2\14\1\34\1\14\1\15\1\127"+
    "\1\111\1\10\1\130\2\10\1\3\1\131\2\46\1\104\3\3\1\47\13\14\1\70\1\10\1\55"+
    "\1\50\1\14\1\56\1\10\1\55\2\10\1\57\11\3\1\114\1\66\1\40\1\34\1\3\1\14\1\47"+
    "\1\14\1\47\1\132\1\36\1\47\1\70\1\10\1\52\1\72\1\14\1\40\1\10\1\57\2\10\1"+
    "\57\1\14\10\3\1\37\5\3\1\57\1\3\2\10\1\57\2\3\1\133\1\115\1\104\2\14\1\47"+
    "\10\14\1\37\1\51\4\10\1\64\1\14\1\74\2\10\1\51\10\10\1\134\1\3\1\127\16\3"+
    "\12\14\1\56\4\10\1\135\2\10\1\57\1\3\1\14\1\71\1\65\1\71\1\103\1\63\1\10\1"+
    "\65\1\74\1\60\2\14\1\71\2\10\1\73\3\10\1\57\11\14\1\43\1\3\1\34\12\14\1\15"+
    "\23\14\1\41\1\35\1\14\1\15\1\41\1\35\12\14\1\41\1\35\10\14\1\41\1\35\1\14"+
    "\1\15\1\41\1\35\3\14\1\15\16\14\1\41\1\35\20\14\1\15\1\51\10\3\4\14\4\3\25"+
    "\14\1\136\1\46\1\100\1\47\132\14\1\66\4\14\1\47\5\14\1\15\1\3\22\14\1\15\1"+
    "\36\1\76\1\46\1\137\1\3\3\14\1\41\1\71\1\134\2\3\4\14\1\71\1\134\2\3\4\14"+
    "\1\71\3\3\3\14\1\41\1\140\3\3\15\14\10\10\1\113\1\50\1\116\2\10\1\57\7\3\1"+
    "\111\1\57\2\10\1\57\1\3\26\14\2\3\12\14\1\141\1\3\21\14\1\35\2\3\7\14\1\142"+
    "\3\10\1\3\3\10\2\3\1\104\2\10\7\14\1\35\1\14\1\37\2\3\13\14\1\3\4\10\1\60"+
    "\1\14\1\57\1\3\2\10\1\57\11\3\5\14\1\56\1\10\1\3\15\14\1\74\1\10\1\55\7\10"+
    "\1\107\2\10\1\57\1\3\2\10\1\57\2\3\1\113\2\3\3\46\1\143\20\3\1\10\1\60\13"+
    "\14\4\10\1\60\1\14\1\3\2\10\1\57\3\3\1\111\2\10\3\3\1\135\7\14\1\74\2\10\1"+
    "\65\2\10\1\65\12\14\1\71\3\10\3\3\11\14\5\10\2\3\2\10\1\57\1\47\2\10\1\65"+
    "\10\14\1\35\2\46\1\137\21\3\1\55\5\10\1\60\1\70\1\71\1\144\1\100\1\3\60\14"+
    "\11\10\1\102\3\46\1\100\1\126\1\10\5\14\1\35\1\14\1\35\11\14\1\35\1\14\1\35"+
    "\2\14\2\132\7\14\1\35\15\14\1\41\1\14\1\40\1\36\1\41\1\14\1\37\1\14\1\36\1"+
    "\14\1\3\3\14\1\37\1\36\1\41\1\14\1\37\2\3\1\67\1\0\6\3\1\145\1\146\3\3\1\113"+
    "\1\37\4\3\1\37\2\3\1\0\1\54\1\147\1\0\1\34\2\3\1\113\4\3\3\14\1\37\6\150\1"+
    "\151\5\3\3\10\1\152\1\153\1\106\2\10\1\134\3\3\1\32\1\113\1\36\2\14\1\34\1"+
    "\47\1\35\1\3\1\40\1\41\1\43\2\14\1\35\1\14\1\3\1\47\1\35\1\32\4\3\12\14\1"+
    "\37\212\3\1\131\14\46\1\100\5\3\13\14\1\15\13\14\1\15\41\14\1\37\1\113\1\56"+
    "\1\65\3\3\11\14\1\43\1\3\1\34\16\14\1\3\1\113\3\3\1\111\5\14\1\15\2\3\1\14"+
    "\1\15\1\14\1\15\1\14\1\15\1\14\1\15\1\14\1\15\1\14\1\15\1\14\1\15\1\14\1\15"+
    "\10\10\13\3\1\113\65\3\1\47\6\3\1\47\1\14\1\71\1\10\1\47\1\35\1\14\1\37\1"+
    "\47\24\14\1\15\1\53\2\47\25\14\1\15\1\14\1\3\1\47\11\14\1\35\1\47\26\14\1"+
    "\15\4\3\6\14\1\15\15\3\61\14\1\35\22\3\63\14\1\76\1\46\1\100\12\3\43\14\1"+
    "\37\20\3\13\14\1\35\3\14\1\37\4\14\2\10\1\65\5\3\13\14\1\56\1\143\2\10\1\154"+
    "\6\14\1\46\1\125\24\14\1\57\10\3\1\113\2\14\1\36\31\14\1\66\1\155\1\14\3\46"+
    "\2\14\1\155\1\143\2\46\17\3\1\126\2\14\2\156\1\56\5\14\1\56\1\10\4\3\1\5\1"+
    "\3\15\14\3\3\1\65\14\14\4\10\1\157\2\3\2\10\1\57\1\3\4\10\1\65\1\14\1\113"+
    "\1\120\2\10\1\65\6\14\1\71\1\10\1\57\5\14\1\56\3\10\3\3\7\14\1\37\1\10\13"+
    "\14\1\56\3\10\1\134\2\3\1\113\2\10\1\57\1\3\7\46\1\143\12\14\1\74\2\10\1\55"+
    "\2\3\1\56\2\14\1\57\2\10\1\57\1\3\5\14\1\15\1\160\1\46\14\14\1\103\1\63\1"+
    "\60\1\71\1\141\5\3\1\113\1\35\2\14\1\56\1\10\1\36\1\161\2\3\1\47\1\15\1\47"+
    "\1\15\1\47\1\15\2\3\1\14\1\15\1\14\1\15\12\46\1\143\2\46\1\100\2\3\24\46\10"+
    "\14\1\56\1\10\1\55\1\57\2\10\1\57\1\3\51\14\3\3\5\14\1\15\1\113\14\14\1\3"+
    "\33\14\1\35\32\14\1\35\11\3\1\14\1\15\2\3\1\113\1\14\1\3\1\162\2\14\1\41\2"+
    "\14\1\15\1\14\1\40\1\43\1\41\32\14\1\35\7\3\1\113\32\14\1\35\4\3\20\14\1\36"+
    "\15\14\12\3\3\14\1\5\4\10\4\3\1\10\1\102\2\46\1\113\1\37\5\3\1\47\6\3\1\117"+
    "\1\3\1\14\1\41\41\14\1\163\1\3\1\5\2\3\2\10\1\57\1\3\1\47\5\14\1\15\1\113"+
    "\1\47\5\14\1\15\2\3\1\36\25\14\1\15\1\36\1\14\1\36\1\14\1\36\1\14\1\36\1\37"+
    "\1\31\1\164\4\3\1\165\1\3\3\14\1\47\5\14\1\15\4\14\1\15\1\43\3\14\1\35\3\14"+
    "\1\35\10\3\36\14\1\15\21\3\15\14\1\37\41\3\1\115\40\3\7\14\1\37\14\14\1\37"+
    "\3\3\1\137\7\3\7\14\1\155\4\3\6\14\1\15\1\3\12\46\1\143\1\3\7\14\1\35\11\14"+
    "\1\3\2\14\1\47\1\35\12\3\47\14\1\35\2\10\1\57\1\3\11\46\1\3\11\46\1\3\12\46"+
    "\2\3\15\46\47\3\115\46\1\143\2\3\5\46\1\100\2\3\2\46\46\3\1\14\1\35\1\41\12"+
    "\14\1\43\1\37\1\66\5\14\1\35\2\3\5\46\1\143\2\3\7\46\1\143\20\3\4\46\1\143"+
    "\1\100\2\3\5\14\1\35\2\3\6\14\1\35\21\3\16\14\1\3\1\36\20\3\1\74\1\53\1\3"+
    "\1\10\1\14\2\47\6\14\1\3\1\55\1\111\10\3\7\14\1\37\7\46\1\137\10\3\2\46\1"+
    "\166\6\46\1\143\6\3\15\14\1\35\2\3\5\14\1\35\2\3\4\14\1\15\3\3\4\46\1\100"+
    "\33\3\22\14\1\37\15\3\14\46\1\143\3\3\14\46\1\143\3\3\1\135\15\14\3\10\1\55"+
    "\7\3\1\104\2\10\3\3\1\126\1\135\13\14\2\10\1\55\1\33\4\3\6\14\1\37\1\3\2\10"+
    "\1\57\1\3\1\135\10\14\1\56\3\10\1\64\2\10\4\3\11\46\1\167\2\3\1\135\13\14"+
    "\1\56\3\10\1\60\1\37\1\131\1\137\2\10\1\170\1\137\10\3\4\46\1\101\11\46\1"+
    "\3\1\167\20\3\1\46\1\143\1\77\1\101\3\46\1\101\2\46\1\137\1\3\16\46\1\143"+
    "\1\3\2\46\1\100\1\3\1\46\1\166\1\46\2\171\5\46\1\77\1\46\1\77\1\166\1\100"+
    "\2\46\2\171\1\100\1\137\1\126\1\3\1\166\1\46\1\131\1\46\1\137\1\46\1\137\42"+
    "\3\22\46\1\143\1\3\2\46\1\100\11\3\21\46\1\101\2\3\2\46\1\100\51\3\15\46\1"+
    "\100\2\46\1\137\5\3\1\46\1\100\10\3\20\46\2\137\2\3\2\46\1\100\11\3\12\14"+
    "\1\56\3\10\2\3\2\10\1\57\15\3\6\46\1\100\1\166\3\46\1\3\2\46\1\100\131\3\22"+
    "\46\1\100\4\3\1\126\60\3\16\46\1\137\1\3\2\46\1\77\12\46\1\143\2\46\1\137"+
    "\3\3\2\46\1\100\5\3\1\131\7\46\1\131\5\46\1\166\2\46\1\143\22\3\33\14\1\155"+
    "\12\46\1\100\31\3\30\14\1\155\2\46\1\143\4\3\61\46\57\3\13\14\1\15\64\3\21"+
    "\46\1\143\56\3\16\14\1\37\1\3\7\46\1\143\2\46\1\100\31\3\7\46\1\100\1\46\1"+
    "\137\2\3\15\46\1\143\2\3\1\46\3\3\2\46\1\100\1\3\1\126\5\46\1\3\1\166\4\46"+
    "\34\3\21\14\1\37\2\3\1\74\12\10\1\55\3\3\1\111\1\135\3\14\20\3\1\137\7\3\73"+
    "\46\1\137\4\3\74\46\1\143\3\3\1\35\77\3\32\46\1\143\1\3\3\46\1\137\2\46\1"+
    "\137\1\3\2\46\1\100\1\172\61\3\1\51\1\57\1\51\1\173\1\0\1\174\1\10\1\55\1"+
    "\51\1\10\7\3\1\104\1\57\44\3\1\104\1\134\56\3\25\14\1\41\21\14\1\41\1\32\1"+
    "\114\1\47\1\41\2\14\1\43\1\47\1\14\1\47\17\14\1\43\1\15\1\47\1\14\1\41\1\14"+
    "\1\41\6\14\1\43\1\15\1\14\1\40\1\36\1\14\1\41\124\14\1\35\6\14\1\41\5\14\1"+
    "\15\7\14\1\15\6\14\1\41\7\14\1\41\5\14\1\15\7\14\1\15\6\14\1\41\7\14\1\41"+
    "\5\14\1\15\2\14\1\104\14\10\15\46\1\143\1\126\14\46\1\137\1\3\1\120\3\3\1"+
    "\137\4\3\1\126\1\46\1\166\3\46\24\3\1\46\1\143\4\46\1\171\1\46\1\101\1\77"+
    "\1\143\65\3\61\46\1\137\2\3\1\46\1\143\12\3\22\46\1\143\1\3\2\46\1\100\51"+
    "\3\1\14\1\47\6\14\1\114\1\66\1\47\1\14\1\15\1\14\1\132\1\3\1\32\1\113\1\132"+
    "\1\47\1\114\1\66\2\132\1\114\1\66\1\15\1\14\1\15\1\14\1\47\1\40\2\14\1\43"+
    "\4\14\1\3\2\47\1\43\4\14\35\3\6\46\1\100\1\3\6\46\1\100\1\3\6\46\1\100\35"+
    "\3\65\14\1\15\12\3\15\14\1\37\2\3\67\14\1\35\140\46\1\100\27\3\7\14\1\35\70"+
    "\3\1\33\7\3\30\0\40\3\74\10\4\3");

  /* The ZZ_CMAP_A table has 500 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\32\1\1\1\2\1\1\1\2\1\1\2\32\4\0\1\36\1\0\1\34\1\0\1\31\3\0\1\4\1\5\2\0"+
    "\1\11\2\0\1\13\6\40\1\0\1\12\1\0\1\10\2\0\1\3\12\37\1\0\1\14\2\0\1\37\1\0"+
    "\1\16\1\37\1\15\1\30\1\20\2\37\1\22\1\25\4\37\1\23\1\37\1\21\2\37\1\17\1\24"+
    "\3\37\1\27\1\26\1\37\1\6\1\0\1\7\1\0\2\32\1\33\2\32\2\0\4\31\4\0\1\37\2\0"+
    "\1\32\3\0\1\37\2\0\2\37\4\0\3\37\3\0\1\37\1\0\1\37\1\0\1\37\1\0\4\37\1\0\1"+
    "\35\2\37\1\0\3\37\1\0\1\40\2\35\2\37\4\35\1\0\3\37\3\0\1\31\1\0\5\40\1\0\1"+
    "\40\1\0\2\40\1\0\1\32\3\0\3\40\1\0\3\37\3\40\2\0\1\40\3\37\1\0\1\37\3\40\1"+
    "\32\1\0\2\40\2\37\2\40\1\0\4\40\3\37\2\0\1\37\3\0\1\32\1\37\1\40\4\37\3\40"+
    "\1\37\2\0\2\40\1\37\1\40\1\37\3\40\1\37\1\35\3\37\4\35\1\0\4\35\2\0\2\35\1"+
    "\0\1\35\3\40\1\35\1\40\1\37\2\40\2\0\2\40\1\35\3\37\1\35\4\40\2\0\3\40\1\37"+
    "\4\0\1\40\2\37\2\31\3\0\1\37\1\0\2\37\2\0\1\40\2\0\1\37\1\40\3\0\1\31\3\0"+
    "\1\35\4\0\1\40\3\37\1\35\1\0\2\35\2\40\1\0\1\35\2\40\3\35\1\40\3\0\1\35\2"+
    "\0\1\40\1\0\1\40\1\0\1\40\3\0\2\35\1\0\1\37\1\0\1\37\1\0\1\40\1\0\2\40\3\0"+
    "\3\40\2\37\1\35\2\0\1\35\3\0\1\37\1\0\2\40\1\37\1\40\1\37\1\0\1\37\2\35\1"+
    "\0\3\35\1\0\1\40\2\37\1\0\2\1\5\32\3\0\2\32\7\31\1\0\1\40\4\35\1\40\2\35\2"+
    "\40\1\0\4\37\1\35\2\37\1\40\1\37\1\40\1\35\4\0\1\37\1\40\1\37\2\40\2\0\1\37"+
    "\1\40\2\37\2\0\1\32\1\0\2\31\2\0\3\32\1\0\3\35\2\0\1\35\1\0\2\40\1\35\1\0"+
    "\1\35\2\0\1\35\1\0\2\35\1\0\3\40\4\32\1\40");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\4\13\1\1\2\14\1\13"+
    "\1\15\3\13\1\0\1\16\5\13\1\17\4\13\1\20"+
    "\1\13\1\21\1\13\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\204\0\204"+
    "\0\204\0\204\0\204\0\204\0\204\0\204\0\306\0\347"+
    "\0\u0108\0\u0129\0\u014a\0\u016b\0\u018c\0\u01ad\0\u01ce\0\204"+
    "\0\u01ef\0\u0210\0\u0231\0\u016b\0\204\0\u0252\0\u0273\0\u0294"+
    "\0\u02b5\0\u02d6\0\u0108\0\u02f7\0\u0318\0\u0339\0\u035a\0\u0108"+
    "\0\u037b\0\u0108\0\u039c\0\u0108";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\5\1\20\2\21\1\22\1\23"+
    "\10\21\1\5\1\6\1\24\1\5\1\6\1\21\2\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\2\5\15\21\1\5\1\6\1\24\1\5\1\6"+
    "\1\21\1\5\1\25\1\26\1\6\11\25\1\5\16\25"+
    "\1\26\2\25\1\26\2\25\1\5\2\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\2\5\3\21"+
    "\1\27\11\21\1\5\1\6\1\24\1\5\1\6\1\21"+
    "\1\5\42\0\2\6\30\0\1\6\2\0\1\6\15\0"+
    "\1\30\42\0\1\21\1\31\15\21\3\0\2\21\15\0"+
    "\17\21\3\0\2\21\15\0\6\21\1\32\10\21\3\0"+
    "\2\21\15\0\5\21\1\33\11\21\3\0\2\21\15\0"+
    "\14\34\3\0\1\35\4\34\2\25\1\0\11\25\1\0"+
    "\25\25\1\26\1\6\11\25\1\0\16\25\1\26\2\25"+
    "\1\26\2\25\15\0\12\21\1\36\4\21\3\0\2\21"+
    "\15\0\2\21\1\37\14\21\3\0\2\21\15\0\7\21"+
    "\1\40\7\21\3\0\2\21\15\0\1\21\1\41\15\21"+
    "\3\0\2\21\15\0\7\21\1\42\7\21\3\0\2\21"+
    "\15\0\3\21\1\43\13\21\3\0\2\21\15\0\10\21"+
    "\1\44\6\21\3\0\2\21\15\0\2\21\1\45\14\21"+
    "\3\0\2\21\15\0\3\21\1\46\13\21\3\0\2\21"+
    "\15\0\7\21\1\47\7\21\3\0\2\21\15\0\3\21"+
    "\1\50\13\21\3\0\2\21\15\0\6\21\1\51\10\21"+
    "\3\0\2\21\15\0\11\21\1\52\5\21\3\0\2\21"+
    "\15\0\13\21\1\53\3\21\3\0\2\21\15\0\2\21"+
    "\1\54\14\21\3\0\2\21";

  private static int [] zzUnpackTrans() {
    int [] result = new int[957];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\10\11\11\1\1\11\3\1\1\0"+
    "\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[44];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GenCaseLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 19: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 20: break;
          case 3: 
            { return Types.ATSIGN;
            } 
            // fall through
          case 21: break;
          case 4: 
            { return Types.LEFT_BRACKET;
            } 
            // fall through
          case 22: break;
          case 5: 
            { return Types.RIGHT_BRACKET;
            } 
            // fall through
          case 23: break;
          case 6: 
            { return Types.LEFT_CURLY;
            } 
            // fall through
          case 24: break;
          case 7: 
            { yybegin(YYINITIAL); return Types.RIGHT_CURLY;
            } 
            // fall through
          case 25: break;
          case 8: 
            { return Types.EQUALS;
            } 
            // fall through
          case 26: break;
          case 9: 
            { return Types.COMMA;
            } 
            // fall through
          case 27: break;
          case 10: 
            { return Types.SEMICOLON;
            } 
            // fall through
          case 28: break;
          case 11: 
            { return Types.IDENTIFIER;
            } 
            // fall through
          case 29: break;
          case 12: 
            { yybegin(YYINITIAL); return Types.TEXT;
            } 
            // fall through
          case 30: break;
          case 13: 
            { yybegin(COMMENT); return Types.SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 31: break;
          case 14: 
            { return Types.STRING_VALUE;
            } 
            // fall through
          case 32: break;
          case 15: 
            { yybegin(CASE); return Types.CASE_KEYWORD;
            } 
            // fall through
          case 33: break;
          case 16: 
            { yybegin(PHASE); return Types.PHASE_KEYWORD;
            } 
            // fall through
          case 34: break;
          case 17: 
            { yybegin(ENTITY); return Types.ENTITY_KEYWORD;
            } 
            // fall through
          case 35: break;
          case 18: 
            { yybegin(ENTITY); return Types.EXTENDS_KEYWORD;
            } 
            // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
